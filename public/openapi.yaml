openapi: 3.0.3
info:
  title: Daftra E-commerce API
  description: |
    RESTful API for Daftra E-commerce platform providing authentication, user management, and comprehensive catalog browsing endpoints.
    
    ## Authentication
    This API uses Bearer token authentication with Laravel Sanctum. Include the token in the Authorization header:
    `Authorization: Bearer {token}`
    
    ## Security Features
    - Timing attack prevention on login endpoints
    - Secure password hashing with bcrypt
    - Rate limiting on authentication endpoints
    
    ## Performance Features
    - Intelligent caching on catalog endpoints (1-hour cache)
    - Optimized database queries with proper indexing
    - Fast response times with minimal database load
    - Efficient pagination for large datasets
    
    ## Catalog Features
    - Advanced product filtering by category, price range, and search
    - Laravel-standard pagination with metadata
    - Products ordered by price for consistent browsing
    - Real-time stock information
    - Thumbnail image support
    
    ## Response Format
    All responses follow a consistent JSON format with appropriate HTTP status codes.
  version: 1.0.0
  contact:
    name: Daftra API Support
    email: support@daftra.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000/api
    description: Development server
  - url: https://api.daftra.com/api
    description: Production server

security:
  - bearerAuth: []

paths:
  /login:
    post:
      tags:
        - Authentication
      summary: User Login
      description: |
        Authenticate a user with email and password credentials.
        
        **Security Features:**
        - Timing attack prevention: All authentication attempts take approximately 300ms
        - Rate limiting: 5 attempts per minute per IP
        - Secure password verification with bcrypt
        
        **Success Response:**
        Returns a Bearer token and user information for authenticated access to protected endpoints.
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_credentials:
                summary: Valid login credentials
                value:
                  email: "user@example.com"
                  password: "password123"
              invalid_email:
                summary: Invalid email format
                value:
                  email: "invalid-email"
                  password: "password123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              examples:
                success:
                  summary: Successful login
                  value:
                    token: "1|dy3hZHSBvfqAhhHm48ar8g2mfnFAb1K1x2a3fSxL884c2a58"
                    user:
                      id: 1
                      name: "John Doe"
                      email: "user@example.com"
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_credentials:
                  summary: Invalid email or password
                  value:
                    message: "Invalid credentials"
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                missing_email:
                  summary: Missing email field
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email field is required."
                missing_password:
                  summary: Missing password field
                  value:
                    message: "The given data was invalid."
                    errors:
                      password:
                        - "The password field is required."
                invalid_email:
                  summary: Invalid email format
                  value:
                    message: "The given data was invalid."
                    errors:
                      email:
                        - "The email field must be a valid email address."
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                rate_limit:
                  summary: Rate limit exceeded
                  value:
                    message: "Too many login attempts. Please try again later."

  /user:
    get:
      tags:
        - User
      summary: Get Authenticated User
      description: |
        Retrieve the currently authenticated user's information.
        
        **Requirements:**
        - Valid Bearer token in Authorization header
        - Active user session
        
        **Response:**
        Returns the authenticated user's profile information.
      operationId: getAuthenticatedUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                success:
                  summary: Authenticated user details
                  value:
                    id: 1
                    name: "John Doe"
                    email: "user@example.com"
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  summary: Missing authorization token
                  value:
                    message: "Unauthenticated."
                invalid_token:
                  summary: Invalid or expired token
                  value:
                    message: "Unauthenticated."

  /categories:
    get:
      tags:
        - Catalog
      summary: Get All Categories
      description: |
        Retrieve all available product categories.
        
        **Features:**
        - No authentication required (public endpoint)
        - Results are cached for 1 hour for optimal performance
        - Returns categories with ID and title only
        
        **Response:**
        Returns an array of all available categories in the system.
      operationId: getCategories
      security: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              examples:
                success:
                  summary: List of categories
                  value:
                    - id: 1
                      title: "Electronics"
                    - id: 2
                      title: "Clothing"
                    - id: 3
                      title: "Books"
                empty:
                  summary: No categories available
                  value: []
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                method_not_allowed:
                  summary: Invalid HTTP method
                  value:
                    message: "The GET method is not supported for this route. Supported methods: POST."

  /products:
    get:
      tags:
        - Catalog
      summary: Get Products with Filtering and Pagination
      description: |
        Retrieve products with advanced filtering and pagination capabilities.
        
        **Features:**
        - No authentication required (public endpoint)
        - Results are cached for 1 hour for optimal performance
        - Advanced filtering by category, price range, and search
        - Paginated results with Laravel pagination format
        - Products ordered by price (ascending)
        
        **Filtering Options:**
        - **category_id**: Filter by specific category
        - **price_min**: Minimum price filter (in cents)
        - **price_max**: Maximum price filter (in cents)
        - **search**: Search in product titles
        - **page**: Pagination page number
        
        **Response:**
        Returns paginated products with metadata including total count, current page, and pagination links.
      operationId: getProducts
      security: []
      parameters:
        - name: category_id
          in: query
          description: Filter products by category ID
          required: false
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: price_min
          in: query
          description: Minimum price filter in cents (e.g., 1000 = $10.00)
          required: false
          schema:
            type: integer
            minimum: 0
          example: 1000
        - name: price_max
          in: query
          description: Maximum price filter in cents (e.g., 5000 = $50.00)
          required: false
          schema:
            type: integer
            minimum: 1
          example: 5000
        - name: search
          in: query
          description: Search term for product titles
          required: false
          schema:
            type: string
            maxLength: 255
          example: "phone"
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPaginatedResponse'
              examples:
                success:
                  summary: Paginated products with filters
                  value:
                    data:
                      - id: 1
                        title: "iPhone 14 Pro"
                        price: 999.99
                        category_id: 1
                        stock: 25
                        thumbnail: "https://example.com/thumbnails/iphone14.jpg"
                      - id: 2
                        title: "Samsung Galaxy S23"
                        price: 899.99
                        category_id: 1
                        stock: 15
                        thumbnail: "https://example.com/thumbnails/galaxy-s23.jpg"
                    links:
                      first: "http://localhost:8000/api/products?page=1"
                      last: "http://localhost:8000/api/products?page=3"
                      prev: null
                      next: "http://localhost:8000/api/products?page=2"
                    meta:
                      current_page: 1
                      from: 1
                      last_page: 3
                      per_page: 15
                      to: 15
                      total: 42
                empty:
                  summary: No products found
                  value:
                    data: []
                    links:
                      first: "http://localhost:8000/api/products?page=1"
                      last: null
                      prev: null
                      next: null
                    meta:
                      current_page: 1
                      from: null
                      last_page: 1
                      per_page: 15
                      to: null
                      total: 0
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                invalid_category:
                  summary: Invalid category ID
                  value:
                    message: "The given data was invalid."
                    errors:
                      category_id:
                        - "The selected category id is invalid."
                invalid_price:
                  summary: Invalid price range
                  value:
                    message: "The given data was invalid."
                    errors:
                      price_min:
                        - "The price min field must be an integer."
                      price_max:
                        - "The price max field must be at least 1."
                search_too_long:
                  summary: Search term too long
                  value:
                    message: "The given data was invalid."
                    errors:
                      search:
                        - "The search field must not be greater than 255 characters."
        '405':
          description: Method not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                method_not_allowed:
                  summary: Invalid HTTP method
                  value:
                    message: "The GET method is not supported for this route. Supported methods: POST."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Laravel Sanctum Bearer token authentication.
        
        **How to obtain a token:**
        1. Use the `/login` endpoint with valid credentials
        2. Include the returned token in the `Authorization` header as `Bearer {token}`
        
        **Token format:**
        `{token_id}|{plain_text_token}`
        
        **Example:**
        `Authorization: Bearer 1|dy3hZHSBvfqAhhHm48ar8g2mfnFAb1K1x2a3fSxL884c2a58`

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
          minLength: 5
          maxLength: 255
        password:
          type: string
          format: password
          description: User's password
          example: "password123"
          minLength: 8
          maxLength: 255
      example:
        email: "user@example.com"
        password: "password123"

    LoginResponse:
      type: object
      required:
        - token
        - user
      properties:
        token:
          type: string
          description: |
            Bearer token for API authentication. 
            Format: `{token_id}|{plain_text_token}`
          example: "1|dy3hZHSBvfqAhhHm48ar8g2mfnFAb1K1x2a3fSxL884c2a58"
        user:
          $ref: '#/components/schemas/User'
      example:
        token: "1|dy3hZHSBvfqAhhHm48ar8g2mfnFAb1K1x2a3fSxL884c2a58"
        user:
          id: 1
          name: "John Doe"
          email: "user@example.com"

    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: Unique user identifier
          example: 1
          minimum: 1
        name:
          type: string
          description: User's full name
          example: "John Doe"
          minLength: 1
          maxLength: 255
        email:
          type: string
          format: email
          description: User's email address
          example: "user@example.com"
          minLength: 5
          maxLength: 255
      example:
        id: 1
        name: "John Doe"
        email: "user@example.com"

    ErrorResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Human-readable error message
          example: "Invalid credentials"
      example:
        message: "Invalid credentials"

    ValidationErrorResponse:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
          description: General validation error message
          example: "The given data was invalid."
        errors:
          type: object
          description: Field-specific validation errors
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
              - "The email field is required."
            password:
              - "The password field is required."
      example:
        message: "The given data was invalid."
        errors:
          email:
            - "The email field is required."
          password:
            - "The password field is required."

    Category:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: integer
          format: int64
          description: Unique category identifier
          example: 1
          minimum: 1
        title:
          type: string
          description: Category name or title
          example: "Electronics"
          minLength: 1
          maxLength: 255
      example:
        id: 1
        title: "Electronics"

    Product:
      type: object
      required:
        - id
        - title
        - price
        - category_id
        - stock
        - thumbnail
      properties:
        id:
          type: integer
          format: int64
          description: Unique product identifier
          example: 1
          minimum: 1
        title:
          type: string
          description: Product name or title
          example: "iPhone 14 Pro"
          minLength: 1
          maxLength: 255
        price:
          type: number
          format: decimal
          description: Product price in dollars (calculated from cents storage)
          example: 999.99
          minimum: 0
        category_id:
          type: integer
          format: int64
          description: ID of the category this product belongs to
          example: 1
          minimum: 1
        stock:
          type: integer
          description: Available stock quantity
          example: 25
          minimum: 0
        thumbnail:
          type: string
          format: uri
          description: URL to the product thumbnail image
          example: "https://example.com/thumbnails/iphone14.jpg"
          nullable: true
      example:
        id: 1
        title: "iPhone 14 Pro"
        price: 999.99
        category_id: 1
        stock: 25
        thumbnail: "https://example.com/thumbnails/iphone14.jpg"

    ProductPaginatedResponse:
      type: object
      required:
        - data
        - links
        - meta
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Product'
          description: Array of product objects for the current page
        links:
          type: object
          required:
            - first
            - last
            - prev
            - next
          properties:
            first:
              type: string
              format: uri
              description: URL to the first page
              example: "http://localhost:8000/api/products?page=1"
            last:
              type: string
              format: uri
              description: URL to the last page
              example: "http://localhost:8000/api/products?page=5"
              nullable: true
            prev:
              type: string
              format: uri
              description: URL to the previous page
              example: "http://localhost:8000/api/products?page=1"
              nullable: true
            next:
              type: string
              format: uri
              description: URL to the next page
              example: "http://localhost:8000/api/products?page=3"
              nullable: true
          description: Pagination navigation links
        meta:
          type: object
          required:
            - current_page
            - from
            - last_page
            - per_page
            - to
            - total
          properties:
            current_page:
              type: integer
              description: Current page number
              example: 2
              minimum: 1
            from:
              type: integer
              description: Index of the first item on the current page
              example: 16
              minimum: 1
              nullable: true
            last_page:
              type: integer
              description: Last page number
              example: 5
              minimum: 1
            per_page:
              type: integer
              description: Number of items per page
              example: 15
              minimum: 1
            to:
              type: integer
              description: Index of the last item on the current page
              example: 30
              minimum: 1
              nullable: true
            total:
              type: integer
              description: Total number of items across all pages
              example: 73
              minimum: 0
          description: Pagination metadata
      example:
        data:
          - id: 1
            title: "iPhone 14 Pro"
            price: 999.99
            category_id: 1
            stock: 25
            thumbnail: "https://example.com/thumbnails/iphone14.jpg"
          - id: 2
            title: "Samsung Galaxy S23"
            price: 899.99
            category_id: 1
            stock: 15
            thumbnail: "https://example.com/thumbnails/galaxy-s23.jpg"
        links:
          first: "http://localhost:8000/api/products?page=1"
          last: "http://localhost:8000/api/products?page=5"
          prev: "http://localhost:8000/api/products?page=1"
          next: "http://localhost:8000/api/products?page=3"
        meta:
          current_page: 2
          from: 16
          last_page: 5
          per_page: 15
          to: 30
          total: 73

tags:
  - name: Authentication
    description: |
      User authentication endpoints for login and logout operations.
      
      **Security Features:**
      - Timing attack prevention
      - Rate limiting
      - Secure password hashing
      
  - name: User
    description: |
      User profile and management endpoints.
      
      **Authentication Required:**
      All endpoints in this section require Bearer token authentication.
      
  - name: Catalog
    description: |
      Product catalog and category management endpoints.
      
      **Features:**
      - Public access (no authentication required)
      - Cached responses for optimal performance (1-hour cache)
      - Browse available categories and products
      - Advanced product filtering and search
      - Paginated product listings
      - Real-time stock and pricing information

externalDocs:
  description: Find more info about Daftra E-commerce API
  url: https://docs.daftra.com/api 